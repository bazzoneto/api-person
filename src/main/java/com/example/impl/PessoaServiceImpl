package com.example.impl;

import com.example.model.Pessoa;
import com.example.repository.PessoaRepository;
import com.example.service.PessoaService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@SuppressWarnings("unused")
@Service
public class PessoaServiceImpl implements PessoaService {

    @Autowired
    private PessoaRepository repository;

    @Override
    public List<Pessoa> getAll() {
        return repository.findAll();
    }

    @Override
    public Optional<Pessoa> getById(Integer id) {
        return repository.findById(id);
    }

    @Override
    public List<Pessoa> findByNomeIgnoreCaseContainingOrderByNomeAsc(String nome) {
        return repository.findByNomeIgnoreCaseContainingOrderByNomeAsc(nome);
    }

    @Override
    public Pessoa create(Pessoa pessoa) {
        return repository.save(pessoa);
    }

    @Override
    public Pessoa update(Integer id, Pessoa pessoa) {
        return repository.findById(id)
            .map(existingPessoa -> {
                updatePessoaFields(existingPessoa, pessoa);
                return repository.save(existingPessoa);
            })
            .orElseThrow(() -> new PessoaNotFoundException(id));
    }

    private void updatePessoaFields(Pessoa existingPessoa, Pessoa pessoa) {
        existingPessoa.setNome(pessoa.getNome());
        existingPessoa.setSexo(pessoa.getSexo());
        existingPessoa.setEmail(pessoa.getEmail());
        existingPessoa.setDataNascimento(pessoa.getDataNascimento());
        existingPessoa.setNaturalidade(pessoa.getNaturalidade());
        existingPessoa.setNacionalidade(pessoa.getNacionalidade());
        existingPessoa.setCpf(pessoa.getCpf());
    }

    @SuppressWarnings("serial")
	public class PessoaNotFoundException extends RuntimeException {
        public PessoaNotFoundException(Integer id) {
            super("Pessoa com ID " + id + " n√£o encontrada.");
        }
    }

    @Override
    public void delete(Integer id) {
        repository.deleteById(id);
    }

    @Override
    public void deleteAll() {
        repository.deleteAll();
    }
}